# yaml-language-server: $schema=../tests_schema/helm-testsuite.json
suite: test oauth2-proxy deployment
minimumVersion: 1.0.1
templates:
  - oauth2-proxy-deployment.yaml
chart:
  appVersion: 0.2.99
  version: 0.2.99
tests:
  - it: should render deployment when oauth2Proxy is enabled
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: RELEASE-NAME-oauth2-proxy
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.selector.matchLabels["app.kubernetes.io/component"]
          value: oauth2-proxy
      - equal:
          path: spec.template.spec.containers[0].name
          value: oauth2-proxy
      - equal:
          path: spec.template.spec.containers[0].image
          value: quay.io/oauth2-proxy/oauth2-proxy:v7.8.1

  - it: should not render when oauth2Proxy is disabled
    set:
      oauth2Proxy.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should use custom image repository and tag
    set:
      oauth2Proxy.image.repository: my-registry/oauth2-proxy
      oauth2Proxy.image.tag: v8.0.0
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: my-registry/oauth2-proxy:v8.0.0

  - it: should set custom imagePullPolicy
    set:
      oauth2Proxy.image.pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always

  - it: should include config file argument
    asserts:
      - contains:
          path: spec.template.spec.containers[0].args
          content: --config=/etc/oauth2-proxy/oauth2-proxy.cfg

  - it: should set environment variables when specified
    set:
      oauth2Proxy.extraEnvVars:
        - name: OAUTH2_PROXY_CLIENT_ID
          value: test-client-id
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OAUTH2_PROXY_CLIENT_ID
            value: test-client-id

  - it: should add envFrom when extraEnvVarsCM is set
    set:
      oauth2Proxy.extraEnvVarsCM: oauth2-config-cm
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: oauth2-config-cm

  - it: should add envFrom when extraEnvVarsSecret is set
    set:
      oauth2Proxy.extraEnvVarsSecret: oauth2-secret
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: oauth2-secret

  - it: should set correct port configuration
    asserts:
      - equal:
          path: spec.template.spec.containers[0].ports[0].name
          value: http
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 4180
      - equal:
          path: spec.template.spec.containers[0].ports[0].protocol
          value: TCP

  - it: should include liveness and readiness probes
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /ping
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: http
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /ping
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.port
          value: http

  - it: should mount config volume
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: config
            mountPath: /etc/oauth2-proxy
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config
            configMap:
              name: RELEASE-NAME-oauth2-proxy-config-file

  - it: should set resource limits and requests
    set:
      oauth2Proxy.resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 200m
          memory: 128Mi
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.requests.cpu
          value: 50m
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: 64Mi
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: 200m
      - equal:
          path: spec.template.spec.containers[0].resources.limits.memory
          value: 128Mi

  - it: should support extraVolumes and extraVolumeMounts
    set:
      oauth2Proxy.extraVolumes:
        - name: test-volume
          emptyDir: {}
        - name: secret-volume
          secret:
            secretName: my-secret
      oauth2Proxy.extraVolumeMounts:
        - name: test-volume
          mountPath: /tmp/test
        - name: secret-volume
          mountPath: /etc/secrets
          readOnly: true
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: test-volume
            emptyDir: {}
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-volume
            secret:
              secretName: my-secret
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: test-volume
            mountPath: /tmp/test
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: secret-volume
            mountPath: /etc/secrets
            readOnly: true

  - it: should support extraVolumeMounts without extraVolumes
    set:
      oauth2Proxy.extraVolumeMounts:
        - name: existing-volume
          mountPath: /mnt/existing
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: existing-volume
            mountPath: /mnt/existing

  - it: should support extraVolumes without extraVolumeMounts
    set:
      oauth2Proxy.extraVolumes:
        - name: unused-volume
          configMap:
            name: my-config
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: unused-volume
            configMap:
              name: my-config

  - it: should always include default config volume and mount
    set:
      oauth2Proxy.extraVolumes: []
      oauth2Proxy.extraVolumeMounts: []
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config
            configMap:
              name: RELEASE-NAME-oauth2-proxy-config-file
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: config
            mountPath: /etc/oauth2-proxy

  - it: should work with both default config and extra volumes/mounts
    set:
      oauth2Proxy.extraVolumes:
        - name: additional-volume
          emptyDir: {}
      oauth2Proxy.extraVolumeMounts:
        - name: additional-volume
          mountPath: /tmp/additional
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config
            configMap:
              name: RELEASE-NAME-oauth2-proxy-config-file
      - contains:
          path: spec.template.spec.volumes
          content:
            name: additional-volume
            emptyDir: {}
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: config
            mountPath: /etc/oauth2-proxy
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: additional-volume
            mountPath: /tmp/additional

  # Annotation tests
  - it: should not include deployment annotations when none are set
    asserts:
      - notExists:
          path: metadata.annotations

  - it: should include deployment annotations when oauth2Proxy.deploymentAnnotations is set
    set:
      oauth2Proxy.deploymentAnnotations:
        deployment.kubernetes.io/revision: "1"
        custom/annotation: "value"
    asserts:
      - equal:
          path: metadata.annotations["deployment.kubernetes.io/revision"]
          value: "1"
      - equal:
          path: metadata.annotations["custom/annotation"]
          value: "value"

  - it: should include deployment annotations when commonAnnotations is set
    set:
      commonAnnotations:
        common/annotation: "common-value"
        environment: "test"
    asserts:
      - equal:
          path: metadata.annotations["common/annotation"]
          value: "common-value"
      - equal:
          path: metadata.annotations["environment"]
          value: "test"

  - it: should merge deployment annotations with commonAnnotations
    set:
      commonAnnotations:
        common/annotation: "common-value"
        environment: "test"
      oauth2Proxy.deploymentAnnotations:
        deployment.kubernetes.io/revision: "1"
        oauth2proxy/specific: "oauth2proxy-value"
    asserts:
      - equal:
          path: metadata.annotations["common/annotation"]
          value: "common-value"
      - equal:
          path: metadata.annotations["environment"]
          value: "test"
      - equal:
          path: metadata.annotations["deployment.kubernetes.io/revision"]
          value: "1"
      - equal:
          path: metadata.annotations["oauth2proxy/specific"]
          value: "oauth2proxy-value"

  - it: should override commonAnnotations with oauth2Proxy.deploymentAnnotations when keys conflict
    set:
      commonAnnotations:
        environment: "common-environment"
        common/annotation: "common-value"
      oauth2Proxy.deploymentAnnotations:
        environment: "oauth2proxy-environment"
        oauth2proxy/specific: "oauth2proxy-value"
    asserts:
      - equal:
          path: metadata.annotations["environment"]
          value: "oauth2proxy-environment"
      - equal:
          path: metadata.annotations["common/annotation"]
          value: "common-value"
      - equal:
          path: metadata.annotations["oauth2proxy/specific"]
          value: "oauth2proxy-value"

  - it: should not include pod annotations when none are set
    asserts:
      - notExists:
          path: spec.template.metadata.annotations

  - it: should include pod annotations when oauth2Proxy.podAnnotations is set
    set:
      oauth2Proxy.podAnnotations:
        pod/annotation: "pod-value"
        prometheus.io/scrape: "true"
    asserts:
      - equal:
          path: spec.template.metadata.annotations["pod/annotation"]
          value: "pod-value"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
          value: "true"

  - it: should include pod annotations when commonAnnotations is set
    set:
      commonAnnotations:
        common/annotation: "common-value"
        prometheus.io/port: "4180"
    asserts:
      - equal:
          path: spec.template.metadata.annotations["common/annotation"]
          value: "common-value"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/port"]
          value: "4180"

  - it: should merge pod annotations with commonAnnotations
    set:
      commonAnnotations:
        common/annotation: "common-value"
        prometheus.io/port: "4180"
      oauth2Proxy.podAnnotations:
        pod/annotation: "pod-value"
        prometheus.io/scrape: "true"
    asserts:
      - equal:
          path: spec.template.metadata.annotations["common/annotation"]
          value: "common-value"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/port"]
          value: "4180"
      - equal:
          path: spec.template.metadata.annotations["pod/annotation"]
          value: "pod-value"
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
          value: "true"

  - it: should override commonAnnotations with oauth2Proxy.podAnnotations when keys conflict
    set:
      commonAnnotations:
        prometheus.io/scrape: "false"
        common/annotation: "common-value"
      oauth2Proxy.podAnnotations:
        prometheus.io/scrape: "true"
        pod/specific: "pod-value"
    asserts:
      - equal:
          path: spec.template.metadata.annotations["prometheus.io/scrape"]
          value: "true"
      - equal:
          path: spec.template.metadata.annotations["common/annotation"]
          value: "common-value"
      - equal:
          path: spec.template.metadata.annotations["pod/specific"]
          value: "pod-value"

  - it: should render annotations with template values
    set:
      oauth2Proxy.deploymentAnnotations:
        app.version: "{{ .Chart.AppVersion }}"
        release.name: "{{ .Release.Name }}"
      oauth2Proxy.podAnnotations:
        chart.version: "{{ .Chart.Version }}"
        namespace: "{{ .Release.Namespace }}"
    asserts:
      - equal:
          path: metadata.annotations["app.version"]
          value: "0.2.99"
      - equal:
          path: metadata.annotations["release.name"]
          value: "RELEASE-NAME"
      - equal:
          path: spec.template.metadata.annotations["chart.version"]
          value: "0.2.99"
      - equal:
          path: spec.template.metadata.annotations["namespace"]
          value: "NAMESPACE"

  - it: should not render when oauth2Proxy is disabled even with annotations set
    set:
      oauth2Proxy.enabled: false
      oauth2Proxy.deploymentAnnotations:
        test/annotation: "test-value"
      oauth2Proxy.podAnnotations:
        pod/annotation: "pod-value"
    asserts:
      - hasDocuments:
          count: 0

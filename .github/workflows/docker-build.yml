name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/docker-build.yml' 
      - 'backend/**'
      - 'frontend/**'
      - 'Dockerfile.combined'
      - '.hadolint.yaml'
      - '**/Dockerfile'
      - '**/Dockerfile.*'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/docker-build.yml' 
      - 'backend/**'
      - 'frontend/**'
      - 'Dockerfile.combined'
      - '.hadolint.yaml'
      - '**/Dockerfile'
      - '**/Dockerfile.*'

env:
  REGISTRY: harbor.imassage.me
  BACKEND_IMAGE_NAME: erato/backend
  FRONTEND_IMAGE_NAME: erato/frontend
  COMBINED_IMAGE_NAME: erato/app
  SHA_TAG: ${{ github.sha }}

jobs:
  lint:
    timeout-minutes: 10
    name: "lint"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      # Setup section
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          # Source of truth is at /frontend/package.json -> "packageManager" field.
          version: 9.15.5

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          # Source of truth is at /frontend/.node-version
          node-version: '22.10.0'
          cache: 'pnpm'
          cache-dependency-path: './frontend/pnpm-lock.yaml'

      - name: "Install frontend packages"
        working-directory: ./frontend
        run: pnpm install

      - name: "Install Rustfmt"
        run: rustup component add rustfmt

      # Lint run section
      # Every step here should be conditional on "success() || failure()",
      # in order to prevent failing fast, so that we can run all linting steps in one run.

      - name: "Lint Dockerfiles"
        uses: jbergstroem/hadolint-gh-action@v1.12.2
        if: success() || failure()
        with:
          dockerfile: Dockerfile.combined backend/Dockerfile backend/ollama-smol/Dockerfile frontend/Dockerfile
          config_file: .hadolint.yaml

      - name: "rustfmt"
        working-directory: ./backend
        if: success() || failure()
        run: cargo fmt --all --check
      
      - name: "prettier"
        working-directory: ./frontend
        if: success() || failure()
        run: pnpm exec prettier . --check

      - name: "next.js lint"
        working-directory: ./frontend
        if: success() || failure()
        run: pnpm run lint

  cargo-clippy:
    runs-on: ubuntu-22.04
    name: "cargo clippy"
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - name: "Install Rust toolchain"
        run: rustup component add clippy
      - name: "Clippy"
        working-directory: backend
        run: cargo clippy --all-targets --all-features --locked -- -D warnings

  test-backend:
    runs-on: ubuntu-22.04
    name: "test backend"
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - name: "Setup test environment"
        working-directory: backend
        run: |
          ./run_postgres.sh
          ./run_ollama_smol.sh
      # Should be kept in sync with `justfile` -> `install_clis`
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest@0.9.88,sea-orm-cli@1.1.4
      - name: "Run tests"
        working-directory: backend
        run: cargo nextest run
      - name: "Check if OpenAPI spec is up to date"
        working-directory: backend
        run: cargo run --bin gen-openapi -- --check

  build-and-push-amd64:
    runs-on: ubuntu-22.04
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Harbor registry
        uses: docker/login-action@v1
        with:
          registry: harbor.imassage.me
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-amd64
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-amd64
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Combined image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.combined
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest-amd64
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            BACKEND_IMAGE=${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64
            FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push-arm64:
    runs-on: ubuntu-22.04-arm64-custom-large
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Harbor registry
        uses: docker/login-action@v1
        with:
          registry: harbor.imassage.me
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-arm64
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-arm64
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Combined image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.combined
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest-arm64
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            BACKEND_IMAGE=${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
            FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifests:
    needs: [build-and-push-amd64, build-and-push-arm64]
    runs-on: ubuntu-22.04
    steps:
      - name: Log in to Harbor registry
        uses: docker/login-action@v1
        with:
          registry: harbor.imassage.me
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and push manifests
        run: |
          # Backend manifest
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-arm64
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }} \
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64

          # Frontend manifest
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-arm64
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }} \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64

          # Combined manifest
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest-arm64
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }} \
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64 
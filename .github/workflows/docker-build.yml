name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
    paths:
      - '.github/workflows/docker-build.yml' 
      - 'backend/**'
      - 'frontend/**'
      - 'e2e-tests/**'
      - 'infrastructure/charts/**'
      - 'infrastructure/k3d/**'
      - 'Dockerfile.combined'
      - '.hadolint.yaml'
      - '**/Dockerfile'
      - '**/Dockerfile.*'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/docker-build.yml' 
      - 'backend/**'
      - 'frontend/**'
      - 'e2e-tests/**'
      - 'infrastructure/charts/**'
      - 'infrastructure/k3d/**'
      - 'Dockerfile.combined'
      - '.hadolint.yaml'
      - '**/Dockerfile'
      - '**/Dockerfile.*'

env:
  REGISTRY: harbor.imassage.me
  BACKEND_IMAGE_NAME: erato/backend
  FRONTEND_IMAGE_NAME: erato/frontend
  COMBINED_IMAGE_NAME: erato/app
  SHA_TAG: ${{ github.sha }}
  RELEASE_VERSION: ${{ github.ref_type == 'tag' && github.ref_name || '' }}

jobs:
  lint:
    timeout-minutes: 10
    name: "lint"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      # Setup section
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          # Source of truth is at /frontend/package.json -> "packageManager" field.
          version: 9.15.5

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          # Source of truth is at /frontend/.node-version
          node-version: '22.10.0'
          cache: 'pnpm'
          cache-dependency-path: './frontend/pnpm-lock.yaml'

      - name: "Install frontend packages"
        working-directory: ./frontend
        run: pnpm install

      - name: "Install Rustfmt"
        run: rustup component add rustfmt
        working-directory: backend

      - name: "Install sqitch"
        run: sudo apt install -y sqitch

      # Lint run section
      # Every step here should be conditional on "success() || failure()",
      # in order to prevent failing fast, so that we can run all linting steps in one run.

      - name: "Lint Dockerfiles"
        uses: jbergstroem/hadolint-gh-action@v1.12.2
        if: success() || failure()
        with:
          dockerfile: Dockerfile.combined backend/Dockerfile backend/ollama-smol/Dockerfile frontend/Dockerfile
          config_file: .hadolint.yaml

      - name: "rustfmt"
        working-directory: ./backend
        if: success() || failure()
        run: cargo fmt --all --check
      
      - name: "prettier"
        working-directory: ./frontend
        if: success() || failure()
        run: pnpm exec prettier . --check

      - name: "Frontend lint"
        working-directory: ./frontend
        if: success() || failure()
        run: pnpm run lint

      - name: "sqitch db summary up-to-date"
        working-directory: ./backend/sqitch
        if: success() || failure()
        run: ./generate_summary.sh --check

      - name: "Install Helm"
        if: success() || failure()
        uses: azure/setup-helm@v4
        with:
          version: 'v3.16.4'

      - name: "Install helm-unittest plugin"
        if: success() || failure()
        run: helm plugin install https://github.com/helm-unittest/helm-unittest

      - name: "Install dependencies for main chart"
        working-directory: ./infrastructure/charts/erato
        if: success() || failure()
        run: helm dependency update

      - name: "Helm lint main chart"
        working-directory: ./infrastructure/charts/erato
        if: success() || failure()
        run: helm lint .

      - name: "Helm unit tests main chart"
        working-directory: ./infrastructure/charts/erato
        if: success() || failure()
        run: helm unittest .

      - name: "Install dependencies for erato-local chart"
        working-directory: ./infrastructure/k3d/erato-local
        if: success() || failure()
        run: helm dependency update || echo "⚠️  Dependency update may fail for erato-local - this is expected"

      - name: "Helm lint erato-local chart"
        working-directory: ./infrastructure/k3d/erato-local
        if: success() || failure()
        run: helm lint . || echo "⚠️  Lint may fail due to missing Chart.yaml dependencies - this is expected for erato-local"

      - name: "Helm unit tests erato-local chart"
        working-directory: ./infrastructure/k3d/erato-local
        if: success() || failure()
        run: helm unittest --with-subchart=false .

  cargo-clippy:
    runs-on: ubuntu-22.04
    name: "cargo clippy"
    steps:
      - uses: actions/checkout@v4
      - name: "Install Rust toolchain"
        run: rustup component add clippy
        working-directory: backend
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
          workspaces: "./backend -> target"
      - name: "Setup test environment"
        working-directory: backend
        run: |
          sudo add-apt-repository ppa:alex-p/tesseract-ocr5
          sudo apt-get update && sudo apt-get install -y libtesseract-dev libleptonica-dev libclang-dev
      - name: "Clippy"
        working-directory: backend
        run: |
          cargo clippy --all-targets --locked -- -D warnings
          cargo clippy --all-targets --no-default-features --locked
          cargo clippy --all-targets --no-default-features --features=sentry --locked

  test-backend:
    runs-on: ubuntu-22.04
    name: "test backend"
    steps:
      - uses: actions/checkout@v4
      - name: "Install Rust toolchain"
        # Should trigger rustup toolchain install mechanism with rust-toolchain.toml
        run: cargo --help
        working-directory: backend
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: "true"
          workspaces: "./backend -> target"
      - name: "Setup test environment"
        working-directory: backend
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/
          
          sudo add-apt-repository ppa:alex-p/tesseract-ocr5
          sudo apt-get update && sudo apt-get install -y libtesseract-dev libleptonica-dev libclang-dev
          
          ./run_postgres.sh
          ./run_minio.sh
          ./run_ollama_smol.sh
          cp erato.template.toml erato.toml
      # Should be kept in sync with `justfile` -> `install_clis`
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest@0.9.88,sea-orm-cli@1.1.4
      - name: "Run tests"
        working-directory: backend
        run: cargo nextest run --retries 2
      - name: "Check if OpenAPI spec is up to date"
        working-directory: backend
        run: cargo run --bin gen-openapi -- --check

  test-frontend:
    timeout-minutes: 10
    name: "test frontend"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      # Setup section
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          # Source of truth is at /frontend/package.json -> "packageManager" field.
          version: 9.15.5

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          # Source of truth is at /frontend/.node-version
          node-version: '22.10.0'
          cache: 'pnpm'
          cache-dependency-path: './frontend/pnpm-lock.yaml'

      - name: "Install frontend packages"
        working-directory: ./frontend
        run: pnpm install

      - name: "Setup frontend tests"
        working-directory: ./frontend
        run: pnpm run i18n:compile

      - name: "Run frontend tests"
        working-directory: ./frontend
        run: pnpm exec vitest run

  test-e2e:
    name: "test e2e"
    needs: [build-and-push-amd64]
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Harbor registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Install k3d
        run: curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Spin up k3d cluster for tests
        working-directory: ./infrastructure
        run: |
          ./scripts/setup-dev.sh --wait --chart-dep-update \
            --erato-image-repository ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }} \
            --erato-image-tag ${{ env.SHA_TAG }}-amd64 \
            --api-key "${{ secrets.E2E_OPENAI_API_KEY }}"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.5
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '22.10.0'
          cache: 'pnpm'
          cache-dependency-path: './e2e-tests/pnpm-lock.yaml'

      - name: Setup e2e tests
        working-directory: ./e2e-tests
        run: |
          echo "BASE_URL=https://app.erato.internal" > .env
          pnpm install
          pnpm exec playwright install --with-deps
          ./scripts/generate_test_files.sh

      - name: Run e2e tests
        working-directory: ./e2e-tests
        run: |
          pnpm exec playwright test --retries 2 --trace on

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e-tests/playwright-report/
          retention-days: 30 

  build-and-push-helm-chart-dev:
    runs-on: ubuntu-22.04
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Harbor registry
        uses: docker/login-action@v1
        with:
          registry: harbor.imassage.me
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
      - name: "Package and push Helm chart"
        run: ./infrastructure/scripts/release_erato_chart_dev.sh --git-sha=${{ env.SHA_TAG }}

  build-and-push-amd64:
    runs-on: ubuntu-22.04
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Harbor registry
        uses: docker/login-action@v1
        with:
          registry: harbor.imassage.me
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Backend image
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-amd64
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64
            ${{ env.RELEASE_VERSION != '' && format('{0}/{1}:{2}-amd64', env.REGISTRY, env.BACKEND_IMAGE_NAME, env.RELEASE_VERSION) || '' }}
          cache-from: type=registry,image-manifest=true,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-amd64-buildcache
          cache-to: type=registry,image-manifest=true,mode=max,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-amd64-buildcache

      - name: Build and push Frontend image
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-amd64
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64
            ${{ env.RELEASE_VERSION != '' && format('{0}/{1}:{2}-amd64', env.REGISTRY, env.FRONTEND_IMAGE_NAME, env.RELEASE_VERSION) || '' }}
          cache-from: type=registry,image-manifest=true,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-amd64-buildcache
          cache-to: type=registry,image-manifest=true,mode=max,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-amd64-buildcache

      - name: Build and push Combined image
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./Dockerfile.combined
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest-amd64
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64
            ${{ env.RELEASE_VERSION != '' && format('{0}/{1}:{2}-amd64', env.REGISTRY, env.COMBINED_IMAGE_NAME, env.RELEASE_VERSION) || '' }}
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            BACKEND_IMAGE=${{ env.BACKEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION != '' && format('{0}-amd64', env.RELEASE_VERSION) || format('{0}-amd64', env.SHA_TAG) }}
            FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION != '' && format('{0}-amd64', env.RELEASE_VERSION) || format('{0}-amd64', env.SHA_TAG) }}

  build-and-push-arm64:
    runs-on: ubuntu-22.04-arm64-custom-large
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Harbor registry
        uses: docker/login-action@v1
        with:
          registry: harbor.imassage.me
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Backend image
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./backend
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-arm64
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
            ${{ env.RELEASE_VERSION != '' && format('{0}/{1}:{2}-arm64', env.REGISTRY, env.BACKEND_IMAGE_NAME, env.RELEASE_VERSION) || '' }}
          cache-from: type=registry,image-manifest=true,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-arm64-buildcache
          cache-to: type=registry,image-manifest=true,mode=max,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-arm64-buildcache

      - name: Build and push Frontend image
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./frontend
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-arm64
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
            ${{ env.RELEASE_VERSION != '' && format('{0}/{1}:{2}-arm64', env.REGISTRY, env.FRONTEND_IMAGE_NAME, env.RELEASE_VERSION) || '' }}
          cache-from: type=registry,image-manifest=true,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-arm64-buildcache
          cache-to: type=registry,image-manifest=true,mode=max,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-arm64-buildcache

      - name: Build and push Combined image
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./Dockerfile.combined
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest-arm64
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
            ${{ env.RELEASE_VERSION != '' && format('{0}/{1}:{2}-arm64', env.REGISTRY, env.COMBINED_IMAGE_NAME, env.RELEASE_VERSION) || '' }}
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            BACKEND_IMAGE=${{ env.BACKEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION != '' && format('{0}-arm64', env.RELEASE_VERSION) || format('{0}-arm64', env.SHA_TAG) }}
            FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION != '' && format('{0}-arm64', env.RELEASE_VERSION) || format('{0}-arm64', env.SHA_TAG) }}

  create-manifests:
    needs: [build-and-push-amd64, build-and-push-arm64]
    runs-on: ubuntu-22.04
    steps:
      - name: Log in to Harbor registry
        uses: docker/login-action@v1
        with:
          registry: harbor.imassage.me
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and push manifests
        run: |
          # Backend manifest
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest-arm64
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }} \
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
          if [[ "${{ env.RELEASE_VERSION }}" != "" ]]; then
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }} \
              ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-arm64
          fi

          # Frontend manifest
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-arm64
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }} \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
          if [[ "${{ env.RELEASE_VERSION }}" != "" ]]; then
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }} \
              ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-arm64
          fi

          # Combined manifest
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:latest-arm64
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }} \
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.SHA_TAG }}-arm64
          if [[ "${{ env.RELEASE_VERSION }}" != "" ]]; then
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.RELEASE_VERSION }} \
              ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.COMBINED_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}-arm64
          fi

  create-github-release:
    needs: [create-manifests]
    runs-on: ubuntu-22.04
    if: github.ref_type == 'tag'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate release notes
        id: generate_notes
        run: |
          NOTES=$(cat scripts/release-notes-template.md)
          NOTES="${NOTES//\{\{RELEASE_VERSION\}\}/${{ github.ref_name }}}"
          NOTES="${NOTES//\{\{REGISTRY\}\}/${{ env.REGISTRY }}}"
          NOTES="${NOTES//\{\{COMBINED_IMAGE_NAME\}\}/${{ env.COMBINED_IMAGE_NAME }}}"
          # Using a delimiter for multiline output
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "body<<$EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.generate_notes.outputs.body }}
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') }}

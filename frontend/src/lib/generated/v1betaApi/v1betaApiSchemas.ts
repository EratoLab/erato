/**
 * Generated by @openapi-codegen
 *
 * @version
 */
/**
 * @deprecated true
 */
export type Chat = {
  id: string;
};

export type Message = {
  id: string;
};

export type MessageSubmitRequest = {
  /**
   * The ID of the message that this message is a response to. If this is the first message in the chat, this should be empty.
   *
   * @format uuid
   * @example 00000000-0000-0000-0000-000000000000
   */
  previous_message_id?: void;
  /**
   * The text of the message.
   *
   * @example Hello, world!
   */
  user_message: string;
};

export type MessageSubmitStreamingResponseChatCreated = {
  /**
   * @format uuid
   */
  chat_id: string;
};

export type MessageSubmitStreamingResponseMessage =
  | (MessageSubmitStreamingResponseChatCreated & {
      message_type: "chat_created";
    })
  | (MessageSubmitStreamingResponseUserMessageSaved & {
      message_type: "user_message_saved";
    })
  | (MessageSubmitStreamingResponseMessageComplete & {
      message_type: "message_complete";
    })
  | (MessageSubmitStreamingResponseMessageTextDelta & {
      message_type: "text_delta";
    })
  | (MessageSubmitStreamingResponseMessageOther & {
      message_type: "example_other";
    });

export type MessageSubmitStreamingResponseMessageComplete = {
  full_text: string;
  /**
   * @format uuid
   */
  message_id: string;
};

export type MessageSubmitStreamingResponseMessageOther = {
  foo: string;
};

export type MessageSubmitStreamingResponseMessageTextDelta = {
  new_text: string;
};

export type MessageSubmitStreamingResponseUserMessageSaved = {
  /**
   * @format uuid
   */
  message_id: string;
};

export type RecentChat = {
  id: string;
  /**
   * Time of the last message in the chat.
   *
   * @format date-time
   */
  last_message_at: string;
  /**
   * Title of the chat, as generated by a summary of the chat.
   */
  title_by_summary: string;
};

export type UserProfile = {
  /**
   * The user's email address. Shouldn't be used as a unique identifier, as it may change.
   */
  email?: void;
  id: string;
  /**
   * The user's display name.
   */
  name?: void;
  /**
   * The user's profile picture URL.
   */
  picture?: void;
  /**
   * The user's preferred language.
   *
   * The final determined language is intersected with our supported languages, to determine the final language.
   *
   * Will be a BCP 47 language tag (e.g. "en" or "en-US").
   *
   * This is derived in the following order (highest priority first):
   * - ID token claims
   * - Browser Accept-Language header
   * - Default to "en"
   */
  preferred_language: string;
};

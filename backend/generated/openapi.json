{
  "openapi": "3.1.0",
  "info": {
    "title": "",
    "description": "The main API structure\n\n- `/api/v1beta/` <- Most of the API is nested under here. All of the resources there are scoped to what is accessible by the authenticated identity.\n- `/api/v1beta/me` <- Everything under this path is scoped to the subject of the authenticated identity.\nThis means that the identity may be authorized to view more resources, but this is the default view for them.\nE.g. the chats route scoped under there will only list the chats created by the user, but the user may be authorized to also view chats shared by other users.\n",
    "version": ""
  },
  "paths": {
    "/api/v1beta/chats": {
      "get": {
        "tags": [],
        "operationId": "chats",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v1beta/chats/{chat_id}/messages": {
      "get": {
        "tags": [],
        "summary": "Get all messages for a specific chat",
        "operationId": "chat_messages",
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "description": "The ID of the chat to get messages for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of messages to return per page. Defaults to 100 if not provided. Larger values may impact performance.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of messages to skip for pagination. Defaults to 0 if not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved messages with pagination metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid chat ID format"
          },
          "500": {
            "description": "Server error while retrieving messages"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1beta/me/files": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload files and return UUIDs for each",
        "description": "This endpoint accepts a multipart form with one or more files and returns UUIDs for each.",
        "operationId": "upload_file",
        "parameters": [
          {
            "name": "chat_id",
            "in": "query",
            "description": "The chat ID to associate the file with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Files to upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MultipartFormFile"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file upload"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1beta/me/messages/regeneratestream": {
      "post": {
        "tags": [],
        "operationId": "regenerate_message_sse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegenerateMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/RegenerateMessageStreamingResponseMessage"
                }
              }
            }
          },
          "401": {
            "description": "When no valid JWT token is provided"
          },
          "500": {
            "description": "When an internal server error occurs"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1beta/me/messages/submitstream": {
      "post": {
        "tags": [],
        "operationId": "message_submit_sse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageSubmitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSubmitStreamingResponseMessage"
                }
              }
            }
          },
          "401": {
            "description": "When no valid JWT token is provided"
          },
          "500": {
            "description": "When an internal server error occurs"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1beta/me/profile": {
      "get": {
        "tags": [],
        "operationId": "profile",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "401": {
            "description": "When no valid JWT token is provided"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1beta/me/recent_chats": {
      "get": {
        "tags": [],
        "operationId": "recent_chats",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of chats to return per page. Defaults to 30 if not provided. Larger values may impact performance.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of chats to skip for pagination. Defaults to 0 if not provided.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved chats with pagination metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentChatsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error while retrieving chats"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ]
      }
    },
    "/api/v1beta/messages": {
      "get": {
        "tags": [],
        "operationId": "messages",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [],
        "summary": "Get health of the API.",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [],
        "summary": "Get health of the API.",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Chat": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "deprecated": true
      },
      "ChatMessage": {
        "type": "object",
        "description": "A message in a chat",
        "required": [
          "id",
          "chat_id",
          "role",
          "full_text",
          "created_at",
          "updated_at",
          "is_message_in_active_thread"
        ],
        "properties": {
          "chat_id": {
            "type": "string",
            "description": "The ID of the chat this message belongs to"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was created"
          },
          "full_text": {
            "type": "string",
            "description": "The text content of the message"
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the message"
          },
          "is_message_in_active_thread": {
            "type": "boolean",
            "description": "Whether this message is in the active thread"
          },
          "previous_message_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The ID of the previous message in the thread, if any"
          },
          "role": {
            "type": "string",
            "description": "Role of the message sender. May be on of \"user\", \"assistant\", \"system\""
          },
          "sibling_message_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The unique ID of the sibling message, if any"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was last updated"
          }
        }
      },
      "ChatMessageStats": {
        "type": "object",
        "description": "Statistics for a list of chat messages",
        "required": [
          "total_count",
          "current_offset",
          "returned_count",
          "has_more"
        ],
        "properties": {
          "current_offset": {
            "type": "integer",
            "format": "int64",
            "description": "Current offset in the list",
            "minimum": 0
          },
          "has_more": {
            "type": "boolean",
            "description": "Whether there are more messages available"
          },
          "returned_count": {
            "type": "integer",
            "description": "Number of messages in the current response",
            "minimum": 0
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of messages in the chat"
          }
        }
      },
      "ChatMessagesResponse": {
        "type": "object",
        "description": "Response for the chat_messages endpoint",
        "required": [
          "messages",
          "stats"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "description": "The list of messages"
          },
          "stats": {
            "$ref": "#/components/schemas/ChatMessageStats",
            "description": "Statistics about the message list"
          }
        }
      },
      "FileUploadItem": {
        "type": "object",
        "description": "Response for file upload",
        "required": [
          "id",
          "filename"
        ],
        "properties": {
          "filename": {
            "type": "string",
            "description": "The original filename of the uploaded file"
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the uploaded file"
          }
        }
      },
      "FileUploadResponse": {
        "type": "object",
        "description": "Response for file upload",
        "required": [
          "files"
        ],
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileUploadItem"
            },
            "description": "The list of uploaded files with their IDs and filenames"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "MessageSubmitRequest": {
        "type": "object",
        "required": [
          "user_message"
        ],
        "properties": {
          "previous_message_id": {
            "type": [
              "string",
              "null"
            ],
            "format": "uuid",
            "description": "The ID of the message that this message is a response to. If this is the first message in the chat, this should be empty.",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "user_message": {
            "type": "string",
            "description": "The text of the message.",
            "example": "Hello, world!"
          }
        }
      },
      "MessageSubmitStreamingResponseChatCreated": {
        "type": "object",
        "required": [
          "chat_id"
        ],
        "properties": {
          "chat_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "MessageSubmitStreamingResponseMessage": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSubmitStreamingResponseChatCreated",
                "description": "May optionally be sent at the start of the stream to indicate that a new chat has been created."
              },
              {
                "type": "object",
                "required": [
                  "message_type"
                ],
                "properties": {
                  "message_type": {
                    "type": "string",
                    "enum": [
                      "chat_created"
                    ]
                  }
                }
              }
            ],
            "description": "May optionally be sent at the start of the stream to indicate that a new chat has been created."
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSubmitStreamingResponseUserMessageSaved",
                "description": "Sent at the start of the stream to indicate that the user's message has been saved."
              },
              {
                "type": "object",
                "required": [
                  "message_type"
                ],
                "properties": {
                  "message_type": {
                    "type": "string",
                    "enum": [
                      "user_message_saved"
                    ]
                  }
                }
              }
            ],
            "description": "Sent at the start of the stream to indicate that the user's message has been saved."
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSubmitStreamingResponseMessageComplete",
                "description": "Sent when the assistant's response has been saved in full."
              },
              {
                "type": "object",
                "required": [
                  "message_type"
                ],
                "properties": {
                  "message_type": {
                    "type": "string",
                    "enum": [
                      "message_complete"
                    ]
                  }
                }
              }
            ],
            "description": "Sent when the assistant's response has been saved in full."
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSubmitStreamingResponseMessageTextDelta",
                "description": "Sent whenever a new text chunk is generated by the assistant."
              },
              {
                "type": "object",
                "required": [
                  "message_type"
                ],
                "properties": {
                  "message_type": {
                    "type": "string",
                    "enum": [
                      "text_delta"
                    ]
                  }
                }
              }
            ],
            "description": "Sent whenever a new text chunk is generated by the assistant."
          }
        ]
      },
      "MessageSubmitStreamingResponseMessageComplete": {
        "type": "object",
        "required": [
          "message_id",
          "full_text",
          "message"
        ],
        "properties": {
          "full_text": {
            "type": "string"
          },
          "message": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "message_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "MessageSubmitStreamingResponseMessageTextDelta": {
        "type": "object",
        "required": [
          "new_text"
        ],
        "properties": {
          "new_text": {
            "type": "string"
          }
        }
      },
      "MessageSubmitStreamingResponseUserMessageSaved": {
        "type": "object",
        "required": [
          "message_id",
          "message"
        ],
        "properties": {
          "message": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "message_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "MultipartFormFile": {
        "type": "object",
        "required": [
          "name",
          "file"
        ],
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "contentMediaType": "application/octet-stream"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RecentChat": {
        "type": "object",
        "required": [
          "id",
          "title_by_summary",
          "last_message_at",
          "file_uploads"
        ],
        "properties": {
          "file_uploads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileUploadItem"
            },
            "description": "Files uploaded to this chat"
          },
          "id": {
            "type": "string"
          },
          "last_message_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the last message in the chat."
          },
          "title_by_summary": {
            "type": "string",
            "description": "Title of the chat, as generated by a summary of the chat."
          }
        }
      },
      "RecentChatStats": {
        "type": "object",
        "description": "Statistics for a list of recent chats",
        "required": [
          "total_count",
          "current_offset",
          "returned_count",
          "has_more"
        ],
        "properties": {
          "current_offset": {
            "type": "integer",
            "format": "int64",
            "description": "Current offset in the list",
            "minimum": 0
          },
          "has_more": {
            "type": "boolean",
            "description": "Whether there are more chats available"
          },
          "returned_count": {
            "type": "integer",
            "description": "Number of chats in the current response",
            "minimum": 0
          },
          "total_count": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of chats available"
          }
        }
      },
      "RecentChatsResponse": {
        "type": "object",
        "description": "Response for the recent_chats endpoint",
        "required": [
          "chats",
          "stats"
        ],
        "properties": {
          "chats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecentChat"
            },
            "description": "The list of recent chats"
          },
          "stats": {
            "$ref": "#/components/schemas/RecentChatStats",
            "description": "Statistics about the chat list"
          }
        }
      },
      "RegenerateMessageRequest": {
        "type": "object",
        "required": [
          "current_message_id"
        ],
        "properties": {
          "current_message_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the message that should have a replacement response generated.",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "RegenerateMessageStreamingResponseMessage": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSubmitStreamingResponseMessageComplete",
                "description": "Sent when the assistant's response has been saved in full."
              },
              {
                "type": "object",
                "required": [
                  "message_type"
                ],
                "properties": {
                  "message_type": {
                    "type": "string",
                    "enum": [
                      "message_complete"
                    ]
                  }
                }
              }
            ],
            "description": "Sent when the assistant's response has been saved in full."
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSubmitStreamingResponseMessageTextDelta",
                "description": "Sent whenever a new text chunk is generated by the assistant."
              },
              {
                "type": "object",
                "required": [
                  "message_type"
                ],
                "properties": {
                  "message_type": {
                    "type": "string",
                    "enum": [
                      "text_delta"
                    ]
                  }
                }
              }
            ],
            "description": "Sent whenever a new text chunk is generated by the assistant."
          }
        ]
      },
      "UserProfile": {
        "type": "object",
        "required": [
          "id",
          "preferred_language"
        ],
        "properties": {
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "The user's email address. Shouldn't be used as a unique identifier, as it may change."
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The user's display name."
          },
          "picture": {
            "type": [
              "string",
              "null"
            ],
            "description": "The user's profile picture URL."
          },
          "preferred_language": {
            "type": "string",
            "description": "The user's preferred language.\n\nThe final determined language is intersected with our supported languages, to determine the final language.\n\nWill be a BCP 47 language tag (e.g. \"en\" or \"en-US\").\n\nThis is derived in the following order (highest priority first):\n- ID token claims\n- Browser Accept-Language header\n- Default to \"en\""
          }
        }
      }
    }
  }
}
-- ============================================================================
-- Database Schema Dump
-- Generated by dump_current_schema.sh
-- Database: erato
-- Schema: public
-- Excluded tables: changes dependencies events projects releases tags
-- ============================================================================

--
-- PostgreSQL database dump
--

-- Dumped from database version 17.2 (Debian 17.2-1.pgdg120+1)
-- Dumped by pg_dump version 17.0

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA public;


--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON SCHEMA public IS 'Sqitch database deployment metadata v1.1.';


--
-- Name: check_active_thread_siblings_constraint(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_active_thread_siblings_constraint() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    violation_found boolean;
BEGIN
    -- Check if there are any sibling groups with multiple active messages
    SELECT EXISTS (
        WITH sibling_groups AS (
            -- Find all sibling relationships
            SELECT 
                CASE 
                    WHEN m1.sibling_message_id IS NOT NULL THEN m1.sibling_message_id
                    ELSE m1.id
                END AS group_id,
                m1.id,
                m1.is_message_in_active_thread
            FROM public.messages m1
            
            UNION
            
            SELECT 
                CASE 
                    WHEN m2.sibling_message_id IS NOT NULL THEN m2.sibling_message_id
                    ELSE m2.id
                END AS group_id,
                m2.id,
                m2.is_message_in_active_thread
            FROM public.messages m2
            WHERE m2.sibling_message_id IS NOT NULL
        ),
        -- Count active messages per group
        active_counts AS (
            SELECT 
                group_id,
                SUM(CASE WHEN is_message_in_active_thread THEN 1 ELSE 0 END) AS active_count
            FROM sibling_groups
            GROUP BY group_id
        )
        -- Find groups with more than one active message
        SELECT 1
        FROM active_counts
        WHERE active_count > 1
        LIMIT 1
    ) INTO violation_found;
    
    IF violation_found THEN
        RAISE EXCEPTION 'Constraint violation: Multiple messages in the same sibling group are marked as active';
    END IF;
    
    RETURN NULL;
END;
$$;


--
-- Name: set_updated_at_column(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  new.updated_at = now();
  RETURN new;
END;
$$;


--
-- Name: uuidv7(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.uuidv7(timestamp with time zone DEFAULT clock_timestamp()) RETURNS uuid
    LANGUAGE sql PARALLEL SAFE
    AS $_$
  -- Replace the first 48 bits of a uuidv4 with the current
  -- number of milliseconds since 1970-01-01 UTC
  -- and set the "ver" field to 7 by setting additional bits
  select encode(
    set_bit(
      set_bit(
        overlay(uuid_send(gen_random_uuid()) placing
	  substring(int8send((extract(epoch from $1)*1000)::bigint) from 3)
	  from 1 for 6),
	52, 1),
      53, 1), 'hex')::uuid;
$_$;


SET default_table_access_method = heap;

--
-- Name: chats; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.chats (
    id uuid DEFAULT public.uuidv7() NOT NULL,
    owner_user_id text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: messages; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.messages (
    id uuid DEFAULT public.uuidv7() NOT NULL,
    chat_id uuid NOT NULL,
    raw_message jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    previous_message_id uuid,
    sibling_message_id uuid,
    is_message_in_active_thread boolean DEFAULT true NOT NULL,
    generation_input_messages jsonb
);


--
-- Name: chats_latest_message; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.chats_latest_message AS
 SELECT chat_id,
    id AS latest_message_id,
    created_at AS latest_message_at
   FROM ( SELECT m.chat_id,
            m.id,
            m.created_at,
            row_number() OVER (PARTITION BY m.chat_id ORDER BY m.created_at DESC) AS rn
           FROM public.messages m) ranked_messages
  WHERE (rn = 1);


--
-- Name: users; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.users (
    id uuid DEFAULT public.uuidv7() NOT NULL,
    issuer text NOT NULL,
    subject text NOT NULL,
    email text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: COLUMN users.issuer; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.users.issuer IS 'The identity provider (IdP) that authenticated the user (e.g., ''https://login.microsoftonline.com/'', ''https://accounts.google.com'')';


--
-- Name: COLUMN users.subject; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.users.subject IS 'The unique identifier for the user at the IdP (usually a UUID or similar)';


--
-- Name: COLUMN users.email; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.users.email IS 'The user''s email address (optional, as not all IdPs may provide it)';


--
-- Name: chats chats_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.chats
    ADD CONSTRAINT chats_pkey PRIMARY KEY (id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: idx_messages_active_thread; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_messages_active_thread ON public.messages USING btree (is_message_in_active_thread) WHERE (is_message_in_active_thread = true);


--
-- Name: idx_messages_chat_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_messages_chat_id ON public.messages USING btree (chat_id);


--
-- Name: idx_messages_previous_message_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_messages_previous_message_id ON public.messages USING btree (previous_message_id);


--
-- Name: idx_messages_sibling_message_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_messages_sibling_message_id ON public.messages USING btree (sibling_message_id);


--
-- Name: idx_users_issuer_subject; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_users_issuer_subject ON public.users USING btree (issuer, subject);


--
-- Name: messages ensure_single_active_message_in_thread; Type: TRIGGER; Schema: public; Owner: -
--

CREATE CONSTRAINT TRIGGER ensure_single_active_message_in_thread AFTER INSERT OR UPDATE ON public.messages DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE FUNCTION public.check_active_thread_siblings_constraint();


--
-- Name: chats on_update_set_updated_columns; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER on_update_set_updated_columns BEFORE UPDATE ON public.chats FOR EACH ROW EXECUTE FUNCTION public.set_updated_at_column();


--
-- Name: messages on_update_set_updated_columns; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER on_update_set_updated_columns BEFORE UPDATE ON public.messages FOR EACH ROW EXECUTE FUNCTION public.set_updated_at_column();


--
-- Name: users on_update_set_updated_columns; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER on_update_set_updated_columns BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION public.set_updated_at_column();


--
-- Name: messages messages_chat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.messages
    ADD CONSTRAINT messages_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES public.chats(id);


--
-- Name: messages messages_previous_message_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.messages
    ADD CONSTRAINT messages_previous_message_id_fkey FOREIGN KEY (previous_message_id) REFERENCES public.messages(id);


--
-- Name: messages messages_sibling_message_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.messages
    ADD CONSTRAINT messages_sibling_message_id_fkey FOREIGN KEY (sibling_message_id) REFERENCES public.messages(id);


--
-- PostgreSQL database dump complete
--


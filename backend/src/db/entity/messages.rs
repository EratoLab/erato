//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "messages")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub chat_id: Uuid,
    #[sea_orm(column_type = "JsonBinary")]
    pub raw_message: Json,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub previous_message_id: Option<Uuid>,
    pub sibling_message_id: Option<Uuid>,
    pub is_message_in_active_thread: bool,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub generation_input_messages: Option<Json>,
    pub input_file_uploads: Option<Vec<Uuid>>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub generation_parameters: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub generation_metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::chats::Entity",
        from = "Column::ChatId",
        to = "super::chats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chats,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::PreviousMessageId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::SiblingMessageId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef1,
}

impl Related<super::chats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chats.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#!/bin/bash

# The pre-push hook receives the following arguments:
# $1 - Name of the remote (e.g., "origin")
# $2 - URL of the remote

# It also receives through stdin a series of lines in the format:
# <local_ref> <local_sha> <remote_ref> <remote_sha>

check_backend_changes() {
    local changed_files=("$@")
    local backend_files=()
    local initial_dir=$(pwd)

    # Check if any files in backend directory were modified
    for file in "${changed_files[@]}"; do
        if [[ $file == backend/* ]]; then
            backend_files+=("$file")
        fi
    done

    if [ ${#backend_files[@]} -eq 0 ]; then
        echo "No backend files were modified. Proceeding..."
        return 0
    fi

    echo "The following backend files were modified:"
    printf '%s\n' "${backend_files[@]}"
    echo

    # Store the modified files for preview
    local modified_files=$(printf '%s\n' "${backend_files[@]}")

    # Present interactive selection for tests/lint with preview window
    local selected=$(printf "Run tests\nRun lint" | fzf \
        --multi \
        --header="Select actions to perform (use TAB to select multiple, ENTER to confirm, ESC to skip)" \
        --preview "echo 'Modified backend files:'; echo '$modified_files'" \
        --preview-window=right:50%:wrap)

    # Check if fzf was cancelled (ESC pressed)
    if [ $? -eq 130 ]; then
        echo "Skipping all checks..."
        return 0
    fi

    if [ -n "$selected" ]; then
        if echo "$selected" | grep -q "Run tests"; then
            echo "Running tests..."
            cd backend && just test
            cd "$initial_dir"
        fi
        if echo "$selected" | grep -q "Run lint"; then
            echo "Running lint..."
            cd backend && just lint
            cd "$initial_dir"
        fi
    fi

    return $?
}

check_frontend_changes() {
    local changed_files=("$@")
    local frontend_files=()
    local initial_dir=$(pwd)

    # Check if any files in frontend directory were modified
    for file in "${changed_files[@]}"; do
        if [[ $file == frontend/* ]]; then
            frontend_files+=("$file")
        fi
    done

    if [ ${#frontend_files[@]} -eq 0 ]; then
        echo "No frontend files were modified. Proceeding..."
        return 0
    fi

    echo "The following frontend files were modified:"
    printf '%s\n' "${frontend_files[@]}"
    echo

    # Store the modified files for preview
    local modified_files=$(printf '%s\n' "${frontend_files[@]}")

    # Present interactive selection for format check and type/lint check
    local selected=$(printf "Run check-format\nRun type/lint check" | fzf \
        --multi \
        --header="Select actions to perform (use TAB to select multiple, ENTER to confirm, ESC to skip)" \
        --preview "echo 'Modified frontend files:'; echo '$modified_files'" \
        --preview-window=right:50%:wrap)

    # Check if fzf was cancelled (ESC pressed)
    if [ $? -eq 130 ]; then
        echo "Skipping all checks..."
        return 0
    fi

    if [ -n "$selected" ]; then
        if echo "$selected" | grep -q "Run check-format"; then
            echo "Running format check..."
            cd frontend && just check-format
            local format_status=$?
            cd "$initial_dir"
            [ $format_status -ne 0 ] && return 1
        fi
        if echo "$selected" | grep -q "Run type/lint check"; then
            echo "Running type and lint checks..."
            cd frontend && pnpm run check
            local check_status=$?
            cd "$initial_dir"
            [ $check_status -ne 0 ] && return 1
        fi
    fi

    return 0
}

# Check if fzf is installed
if ! command -v fzf >/dev/null 2>&1; then
    echo "fzf is required for interactive selection. Please install it first to get the hook working."
    exit 0
fi

changed_files=()

while read local_ref local_sha remote_ref remote_sha
do
    # Get all changed files between remote and local, removing duplicates
    while IFS= read -r file; do
        changed_files+=("$file")
    done < <(git diff --name-only "$remote_sha..$local_sha")
done

# Remove duplicates from changed_files
changed_files=($(printf "%s\n" "${changed_files[@]}" | sort -u))

# Check backend changes
check_backend_changes "${changed_files[@]}"
if [ $? -ne 0 ]; then
    echo "Backend checks failed. Push aborted."
    exit 1
fi

# Check frontend changes
check_frontend_changes "${changed_files[@]}"
if [ $? -ne 0 ]; then
    echo "Frontend checks failed. Push aborted."
    exit 1
fi

exit 0